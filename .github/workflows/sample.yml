name: PR Update Notification

on:
  schedule:
    - cron: "*/15 * * * *"  # Run every 15 minutes

jobs:
  send_notification:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git
        uses: actions/checkout@v2
        
      - name: Install required libraries for TLS support
        run: sudo apt-get update && sudo apt-get install -y libnet-ssleay-perl libio-socket-ssl-perl

      - name: Install sendemail package
        run: sudo apt-get update && sudo apt-get install -y sendemail

      - name: Check for PR updates
        id: check_updates
        run: |
          last_update_timestamp=$(cat last_update_timestamp.txt 2>/dev/null || echo 0)
          
          updated_pull_requests=$(curl -s -H "Authorization: Bearer ${{ secrets.PR_TOKEN }}" \
                                "https://api.github.com/repos/working-sonata/integration-teams/pulls?state=closed&sort=updated&direction=desc&since=$last_update_timestamp")

          if [ -n "$updated_pull_requests" ]; then
            echo "Closed PR update. Trigger email notification."
            
            pr_details=""
            for row in $(echo "$updated_pull_requests" | jq -r '.[] | @base64'); do
              _jq() {
                echo "${row}" | base64 --decode | jq -r "${1}"
              }
              pr_updated_at=$(_jq '.updated_at')
              
              # Debug print
              echo "PR Updated At: $pr_updated_at"
              echo "Last Update Timestamp: $last_update_timestamp"
              
              if [[ "$pr_updated_at" > "$last_update_timestamp" ]]; then
                pr_number=$(_jq '.number')
                pr_title=$(_jq '.title')
                pr_author=$(_jq '.user.login')
                pr_url=$(_jq '.html_url')

                # Fetch all comments for the pull request using GraphQL API
                query_result=$(curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -d \
                  '{
                    "query": "query { repository(owner:\"working-sonata\", name:\"integration-teams\"){ pullRequest(number:'$pr_number') { comments(first: 100) { nodes { author { login }, bodyText, createdAt } } } } }"
                  }' \
                  https://api.github.com/graphql)

                commit_comments=""
                for comment in $(echo "$query_result" | jq -r '.data.repository.pullRequest.comments.nodes[] | @base64'); do
                  _jq_comment() {
                    echo "${comment}" | base64 --decode | jq -r "${1}"
                  }
                  comment_author=$(_jq_comment '.author.login')
                  comment_text=$(_jq_comment '.bodyText')
                  comment_created_at=$(_jq_comment '.createdAt')
                  commit_comments+="Author: $comment_author\nComment: $comment_text\nCreated At: $comment_created_at\n\n"
                done

                pr_details+="PR Number: $pr_number\nTitle: $pr_title\nAuthor: $pr_author\nURL: $pr_url\nCommit Comments:\n$commit_comments\n\n"
              fi
            done

            if [ -n "$pr_details" ]; then
              email_subject="GitHub PR Update Notification"
              email_body="Closed Pull Requests were updated. Details:\n$pr_details"
              echo -e "Subject: $email_subject\n\n$email_body" \
              | sendemail -f c.bhavya@sonata-software.com -t c.bhavya@sonata-software.com -s outlook.office365.com -o tls=yes -xu c.bhavya@sonata-software.com -xp Varshu@456 -m

              echo "$updated_pull_requests" > previous_state.json
              date -u +"%Y-%m-%dT%H:%M:%SZ" > last_update_timestamp.txt
            else
              echo "No updates to closed PRs."
            fi
          else
            echo "No updates to closed PRs."
          fi
