name: Pull Request Notifications

on:
  pull_request:
    types:
      - synchronize

jobs:
  send_notification:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Debug Event Payload
        run: echo "${{ toJson(github.event) }}"

      - name: Execute GitHub Script
        id: check_updates
        uses: actions/github-script@v4
        with:
          script: |
            const { action, pull_request, repository } = context.payload;
            console.log("Action:", action);
            if (action === 'synchronize' && pull_request.state === 'closed') {
              const notification = `
                Closed Pull Request #${pull_request.number} in ${repository.full_name} was updated.
                Title: ${pull_request.title}
                URL: ${pull_request.html_url}
              `;
              console.log(notification);
              const encodedNotification = Buffer.from(notification).toString('base64');
              console.log("Encoded Notification:", encodedNotification);
              console.log("::set-output name=notification::" + encodedNotification);
              
              // Construct your payload object
              const payloadData = {
                notification: encodedNotification,
                otherData: "closed pr update notifications"
              };
              
              // Replace 'YOUR_PAYLOAD_URL' with the actual URL you want to send data to
              const payloadUrl = ' https://efce-136-226-245-14.ngrok.io/payload';
              
              // Send the payload data to the external service
              const response = await fetch(payloadUrl, {
                method: 'POST',
                body: JSON.stringify(payloadData),
                headers: {
                  'Content-Type': 'application/json'
                }
              });
              
              // Log the response if needed
              console.log('Response:', await response.text());
            }

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Email Notification
        if: steps.check_updates.outputs.notification != ''
        run: |
          echo "${{ steps.check_updates.outputs.notification }}" | base64 --decode | \
          sendemail -f ${{ secrets.SENDER_EMAIL }} -t ${{ secrets.RECIPIENT_EMAIL }} \
          -s ${{ secrets.SMTP_SERVER_ADDRESS }} -o tls=yes -xu ${{ secrets.SMTP_USERNAME }} -xp ${{ secrets.SMTP_PASSWORD }} -m
